## Assignment Part-1
--------------------------------------------------------------------------------------------------------------------------------------
Q1. Why do we call Python as a general purpose and high-level programming language?
GPL: is a programming language designed to be used for building software in a wide variety of application domains, across a multitude of hardware configurations and operating systems.
HLL: is any programming language that enables development of a program in a much more user-friendly programming context and is generally independent of the computer's hardware architecture


Q2. Why is Python called a dynamically typed language?
Python don't have any problem even if we don't declare the type of variable. It states the kind of variable in the runtime of the program.
Python interpreter does type checking only as code runs, and the type of a variable is allowed to change over its lifetime.


Q3. List some pros and cons of Python programming language?
Pros:
Simple and easy-to-understand syntax.
Object Oriented Programming-driven.
Supports imperative and functional programming.
Extensive library.
Supports multiple platforms (Web and mobile computing).
Python is easily extensible with C/C++/Java code.
Open Source and large community support.

Cons:
Python is slow.
Weak in mobile computing.
Has limitations with database access.
Despite being open source, there is no commercial support point.
Since Python is dynamic, more errors show at run-time.



Q4. In what all domains can we use Python?
Machine learning / Artificial intelligence
Desktop GUI
Data analytics and data visualization 
Web development
Game development
Mobile app development
Embedded systems



Q5. What are variable and how can we declare them?
Variables are the basic unit of storage in a programming language.
(Name given to a specific memory location)
x = 5
y = "John"

A variable can have a short name (like x and y) or a more descriptive name (age, carname, total_volume).

Rules for Python variables:
A variable name must start with a letter or the underscore character
A variable name cannot start with a number
A variable name can only contain alpha-numeric characters and underscores (A-z, 0-9, and _ )
Variable names are case-sensitive (age, Age and AGE are three different variables)


Q6. How can we take an input from the user in Python?
name = input('Enter Name: ')
age = int(input('Enter age: ')) # converting age to int during input itself as input takes everything as string


Q7. What is the default datatype of the value that has been taken as an input using input() function?
string


Q8. What is type casting?
Type casting is when you assign a value of one primitive data type to another type.

Q9. Can we take more than one input from the user using single input() function? If yes, how? If no, why?
NO. Not with single input() function.

Python provides the two methods that help us to take multiple values or input in one line.

1.Using split() method
# taking four inputs at a time  
a, b, c, d = input("Enter four values: ").split()  
print("First number is {}, second number is {} third is {} and fourth is {}".format(a, b, c, d))  
print()  

2.Using List Comprehension
# Taking multiple inputs in a single line and type casting using list() function  
x = list(map(int, input("Enter multiple values: ").split()))  
print("List of students: ", x)  


Q10. What are keywords?
reserved set of keywords that cannot be used as variable names, function names, or any other identifiers.


Q11. Can we use keywords as a variable? Support your answer with reason.
No, it won't be feasible for a programmer and even the compiler to identify/differentiate between them.


Q12. What is indentation? What's the use of indentaion in Python?
Indentation refers to the spaces at the beginning of a code line.

Where in other programming languages the indentation in code is for readability only, the indentation in Python is very important.
Python uses indentation to indicate a block of code.



Q13. How can we throw some output in Python?
using Python print() Function.



Q14. What are operators in Python?
Python divides the operators in the following groups:

Arithmetic operators
Assignment operators
Comparison operators
Logical operators
Identity operators
Membership operators
Bitwise operators


Q15. What is difference between / and // operators?
Division : 10/3 =  3.3333333333333335
Floor division: 10//3 =  3



Q16. Write a code that gives following as an output.
```
iNeuroniNeuroniNeuroniNeuron
```
for i in range(1,5):
    print("iNeuron", end = "")
	
	
	

Q17. Write a code to take a number as an input from the user and check if the number is odd or even.

num = int(input('Enter any number: '))
if num % 2 == 0:
    print('EVEN')
else:
    print('ODD')
	
	

Q18. What are boolean operator?
The logical operators and, or and not are referred to as boolean operators.


Q19. What will the output of the following?
```
1 or 0
-> 1
0 and 0
-> 0
True and False and True
-> False
1 or 0 or 0
-> 1
```


Q20. What are conditional statements in Python?
A situation in programming where a specific task is to be performed if a specific condition is True. In such cases, conditional statements can be used. The following are the conditional statements provided by Python. 

if
if..else
Nested if
if-elif statements.




Q21. What is use of 'if', 'elif' and 'else' keywords?
It allows us to check for multiple expressions. If the condition for if is False , it checks the condition of the next elif block and so on. If all the conditions are False , the body of else is executed.



Q22. Write a code to take the age of person as an input and if age >= 18 display "I can vote". If age is < 18 display "I can't vote".
age = int(input('Enter Your Age: '))
if age>=18:
    print('I can vote')
else:
    print("I can't vote")



Q23. Write a code that displays the sum of all the even numbers from the given list.
```
numbers = [12, 75, 150, 180, 145, 525, 50]
```
code:
numbers = [12, 75, 150, 180, 145, 525, 50]
sum = 0
for i in numbers:
    if i%2==0:
        sum+=i
print('Sum of the even numbers from the list = ',sum)



Q24. Write a code to take 3 numbers as an input from the user and display the greatest no as output.
a, b, c = input('Enter three numbers: ').split()
if a>=b and a>=c:
    max = a
elif b>=a and b>=c:
    max = b
else:
    max = c
print('Max of {} {} {} is :'.format(a,b,c), max)




Q25. Write a program to display only those numbers from a list that satisfy the following conditions

- The number must be divisible by five

- If the number is greater than 150, then skip it and move to the next number

- If the number is greater than 500, then stop the loop
```
numbers = [12, 75, 150, 180, 145, 525, 50]
```

a = [12, 75, 150, 180, 145, 525, 50]
b = []
for i in a:
    if i > 150:
        if i > 500:
            break
        continue
    if i % 5 == 0:
        b.append(i)
        
print(b)




Q26. What is a string? How can we declare string in Python?
strings in Python are arrays of bytes representing unicode characters.
However, Python does not have a character data type, a single character is simply a string with a length of 1.
declaration:
str1 = "iNeuron"
str2 = "Shubham's"
Multiline Strings:
str3 = '''Shubham is
not going
to attend 
the seminar
'''



Q27. How can we access the string using its index?
We can access the characters in a string by referring to its index number inside square brackets [] .

str = "Shubham's"
for i in range (0,len(str)):
    print(str[i], end = '')



Q28. Write a code to get the desired output of the following
```
string = "Big Data iNeuron"
desired_output = "iNeuron"
```
print(string[8:  :1])
Or,
string = string.split(" ")
print(string[-1])

Q29. Write a code to get the desired output of the following
```
string = "Big Data iNeuron"
desired_output = "norueNi"
```
print(string[-1:7:-1])



Q30. Resverse the string given in the above question.
string = "Big Data iNeuron"
print(string[-1: :-1]) # norueNi ataD giB
string = string.split(" ")
print(string[-1: :-1]) # ['iNeuron', 'Data', 'Big']



Q31. How can you delete entire string at once?
The del keyword is used to delete objects. In Python everything is an object, so the del keyword can also be used to delete variables, lists, or parts of a list etc.

x = "hello"
del x
print(x)



Q32. What is escape sequence?
An escape sequence is a sequence of characters that, when used inside a character or string, does not represent itself but is converted into another character or series of characters. 
Escape Sequence  : Meaning
\’	             : Single quote
\\’	             : Double quote
\\	             : Backslash 
etc.


Q33. How can you print the below string?
```
'iNeuron's Big Data Course'
```
print('\'iNeuron\'s Big Data Course\'')
or
print("'iNeuron's Big Data Course'")



Q34. What is a list in Python?
Lists are one of 4 built-in data types in Python used to store collections of data.
List items are ordered, changeable, and allow duplicate values.
List items are indexed, the first item has index [0], the second item has index [1] etc.



Q35. How can you create a list in Python?
Lists are created using square brackets:
thislist = ["apple", "banana", "cherry"]



Q36. How can we access the elements in a list?
list1 = [1,"Shubh",20,"Hi"]
By referring to the index number.
print(list1[1])
Or, using a loop
for element in list1:
    print(element, end = " ")



Q37. Write a code to access the word "iNeuron" from the given list.
```
lst = [1,2,3,"Hi",[45,54, "iNeuron"], "Big Data"]
``` 
print(lst[4][2])



Q38. Take a list as an input from the user and find the length of the list.
lst1 = [int(item) for item in input("Enter your list items : ").split()]
print('Length of your List is: ',len(lst1))



Q39. Add the word "Big" in the 3rd index of the given list.
```
lst = ["Welcome", "to", "Data", "course"]
```
lst.insert(2, 'Big')



Q40. What is a tuple? How is it different from list?
Tuple is one of 4 built-in data types in Python used to store collections of data.
Tuple items are ordered, unchangeable, and allow duplicate values.
A tuple is a collection which is ordered and unchangeable i.e. unlike list we are not allowed to change/modify an existing tuple.



Q41. How can you create a tuple in Python?
Tuples are written with round brackets.
thistuple = ("apple", "banana", "cherry")



Q42. Create a tuple and try to add your name in the tuple. Are you able to do it? Support your answer with reason.
NO, We can't add elements to a tuple because of their immutable property.


Q43. Can two tuple be appended. If yes, write a code for it. If not, why?
Concatenating 2 or more tuples to form a new tuple is allowed until and unless there is no modification involved.
t1 = ("a", "b","c")
t2 = (1,2,3)
t3 = t1+t2



Q44. Take a tuple as an input and print the count of elements in it.
t3 = ('a', 'b', 'c', 1, 2, 3)

def tupleElementCount(inputTuple):
    return (len(inputTuple))

print(tupleElementCount(t3)) #6



Q45. What are sets in Python?
Set is one of 4 built-in data types in Python used to store collections of data.
A set is a collection which is unordered, unchangeable*, and unindexed.
Set items do not allow duplicate values.
Note: Set items are unchangeable, but we can remove items and add new items.
Note: Sets are unordered, so we cannot be sure in which order the items will appear.


Q46. How can you create a set?
Sets are written with curly brackets.
thisset = {"apple", "banana", "cherry", "apple"}



Q47. Create a set and add "iNeuron" in your set.
set1 = {'iNeuron'}



Q48. Try to add multiple values using add() function.
set1 = set()
set1.add('iNeuron')
set1.add('iNeuron')
set1.add('1')
set1.add('1')

print(set1) #{'iNeuron', '1'}




Q49. How is update() different from add()?
add() method is used to add one item to a set.

The update() method updates the current set, by adding items from another set (or any other iterable).
If an item is present in both sets, only one appearance of this item will be present in the updated set.



Q50. What is clear() in sets?
The clear() method removes all elements in a set.
Syntax: set.clear()



Q51. What is frozen set?
Python frozenset() Method creates an immutable Set object from an iterable. It is a built-in Python function. As it is a set object therefore we cannot have duplicate values in the frozenset.
Syntax : frozenset(iterable_object_name)


Q52. How is frozen set different from set?
Frozenset is similar to set in Python, except that frozen sets are immutable, which implies that once generated, elements from the frozenset cannot be added or removed.



Q53. What is union() in sets? Explain via code.
The union() method returns a set that contains all items from the original set, and all items from the specified set(s).
If an item is present in more than one set, the result will contain only one appearance of this item.
Syntax: set.union(set1, set2...)

set_a = {1,2,3,4,5,6}
set_b = {3,6,8,9,10}

# union operation
print(set_a | set_b) #or print(set.union(set_a,set_b))
#{1, 2, 3, 4, 5, 6, 8, 9, 10}


Q54. What is intersection() in sets? Explain via code.
The intersection() method returns a set that contains the similarity between two or more sets.
Syntax: set.intersection(set1, set2 ... etc)
x = {"a", "b", "c"}
y = {"c", "d", "e"}
z = {"f", "g", "c"}
# intersection operation
result = x.intersection(y, z) #or result = set.intersection(x,y,z) 
print(result)
#or print(x & y & z)



Q55. What is dictionary in Python?
Dictionaries are used to store data values in key:value pairs.
A dictionary is a collection which is ordered*, changeable and do not allow duplicates.
Note:
As of Python version 3.7, dictionaries are ordered. In Python 3.6 and earlier, dictionaries are unordered.



Q56. How is dictionary different from all other data structures.
list,tuple,sets are iterated using indices whereas dictionary is iterated using key-value pair.
A dictionary has a set of keys and each key has a single associated value.


Q57. How can we declare a dictionary in Python?
Dictionaries are written with curly brackets, and have keys and values:
thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}


Q58. What will the output of the following?
```
var = {}
print(type(var))
```
<class 'dict'>



Q59. How can we add an element in a dictionary?
thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
#adding an element:
a.Using a new index key and assigning a value to it:
thisdict["color"] = "red"

b.Using update() method which will update the dictionary with the items from a given argument. If the item does not exist, the item will be added.
thisdict.update({"color": "red"})

print(thisdict)


Q60. Create a dictionary and access all the values in that dictionary.
dict1 = {}
dict1['name'] = 'Shubh'
dict1['age'] = 22
dict1['skills'] = ['Python', 'Java']
dict1['states_visited'] = ('UP', 'Goa')
dict1[45] = 'Random Key'
dict1['other_details'] = {'color' : 'Black', 'nationality' : 'Indian'}

# How to get the values from a dictionary
print("All Values in dictionary : ",list(dict1.values()))



Q61. Create a nested dictionary and access all the element in the inner dictionary.
dict1 = {
    'name': 'Shubh', 
    'age': 22, 
    'skills': ['Python', 'Java'], 
    'states_visited': ('UP', 'Goa'), 
    45: 'Random Key', 
    'other_details': {
        'color': 'Black', 
        'nationality': 'Indian'
        }
    }

print('Inner dictionary elements: ',dict1['other_details'])



Q62. What is the use of get() function?
The get() method returns the value of the item with the specified key.
Syntax: dictionary.get(keyname, value)

car = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
x = car.get("model")
print(x)                     #Mustang
y = car.get("price", 15000)
print(y)                     #15000




Q63. What is the use of items() function?
The items() method returns a view object. The view object contains the key-value pairs of the dictionary, as tuples in a list.
The view object will reflect any changes done to the dictionary, see example below.
Syntax: dictionary.items()

car = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
x = car.items()
car["year"] = 2018
print(x)
#dict_items([('brand', 'Ford'), ('model', 'Mustang'), ('year', 2018)])



Q64. What is the use of pop() function?
The pop() method removes the specified item from the dictionary.
The value of the removed item is the return value of the pop() method.
Syntax: dictionary.pop(keyname, defaultvalue)

car = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
x = car.pop("model")
print(x) #Mustang



Q65. What is the use of popitems() function?
The popitem() method removes the item that was last inserted into the dictionary. In versions before 3.7, the popitem() method removes a random item.
The removed item is the return value of the popitem() method, as a tuple.
Syntax: dictionary.popitem()

car = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
x = car.popitem()
print(x) #('year', 1964)


Q66. What is the use of keys() function?
The keys() method in Python Dictionary, returns a view object that displays a list of all the keys in the dictionary in order of insertion using Python.
Syntax: dict.keys()

car = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
print(car.keys())
#dict_keys(['brand', 'model', 'year'])


Q67. What is the use of values() function?
values() is an inbuilt method in Python programming language that returns a view object. The view object contains the values of the dictionary, as a list. If we use the type() method on the return value, you get “dict_values object”. It must be cast to obtain the actual list.
dictionary_name.values()

car = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
print(car.values())
#dict_values(['Ford', 'Mustang', 1964])



Q68. What are loops in Python?
loops in Python is a control flow statement that is used to repeatedly execute a group of statements as long as the condition is satisfied. Such a type of statement is also known as an iterative statement.

Looping means repeating something over and over until a particular condition is satisfied.


Q69. How many type of loop are there in Python?
Three Types:
  (i) For Loop. A for loop in Python is used to iterate over a sequence (list, tuple, set, dictionary, and string). 
 (ii) While Loop. The while loop is used to execute a set of statements as long as a condition is true. 
(iii) Nested Loop. If a loop exists inside the body of another loop, it is called a nested loop.



Q70. What is the difference between for and while loops?
For loop is used when the number of iterations is already known. While loop is used when the number of iterations is Unknown.


Q71. What is the use of continue statement?
The continue keyword is used to end the current iteration in a for loop (or a while loop), and continues to the next iteration.


Q72. What is the use of break statement?
The break statement in Python terminates the current loop and resumes execution at the next statement.
It is basically used to bring the program control out of the loop.


Q73. What is the use of pass statement?
The pass statement is used as a placeholder for future code.
When the pass statement is executed, nothing happens, but we avoid getting an error when empty code is not allowed.
Empty code is not allowed in loops, function definitions, class definitions, or in if statements.
Eg.
def myfunction():
  pass


Q74. What is the use of range() function?
The range() function returns a sequence of numbers, starting from 0 by default, and increments by 1 (by default), and stops before a specified number.
Syntax: range(start, stop, step)



Q75. How can you loop over a dictionary?

#Print all key names in the dictionary, one by one:
for key in dict1:
  print(key)
  
#Print all values in the dictionary, one by one:
for x in dict1:
  print(dict1[x])
  
#We can also use the values() function to return values of a dictionary:
for value in dict1.values():
  print(value)
  
#Loop through both keys and values, by using the items() function:
for k, v in dict1.items():
  print(k, v)
  



### Coding problems
Q76. Write a Python program to find the factorial of a given number.

Q77. Write a Python program to calculate the simple interest. Formula to calculate simple interest is SI = (P*R*T)/100

Q78. Write a Python program to calculate the compound interest. Formula of compound interest is A = P(1+ R/100)^t.

Q79. Write a Python program to check if a number is prime or not.

Q80. Write a Python program to check Armstrong Number.

Q81. Write a Python program to find the n-th Fibonacci Number.

Q82. Write a Python program to interchange the first and last element in a list.

Q83. Write a Python program to swap two elements in a list.

Q84. Write a Python program to find N largest element from a list.

Q85. Write a Python program to find cumulative sum of a list.

Q86. Write a Python program to check if a string is palindrome or not.

Q87. Write a Python program to remove i'th element from a string.

Q88. Write a Python program to check if a substring is present in a given string.

Q89. Write a Python program to find words which are greater than given length k.

Q90. Write a Python program to extract unquire dictionary values.

Q91. Write a Python program to merge two dictionary.

Q92. Write a Python program to convert a list of tuples into dictionary.
```
Input : [('Sachin', 10), ('MSD', 7), ('Kohli', 18), ('Rohit', 45)]
Output : {'Sachin': 10, 'MSD': 7, 'Kohli': 18, 'Rohit': 45}
```

Q93. Write a Python program to create a list of tuples from given list having number and its cube in each tuple.
```
Input: list = [9, 5, 6]
Output: [(9, 729), (5, 125), (6, 216)]
```

Q94. Write a Python program to get all combinations of 2 tuples.
```
Input : test_tuple1 = (7, 2), test_tuple2 = (7, 8)
Output : [(7, 7), (7, 8), (2, 7), (2, 8), (7, 7), (7, 2), (8, 7), (8, 2)]
```

Q95. Write a Python program to sort a list of tuples by second item.
```
Input : [('for', 24), ('Geeks', 8), ('Geeks', 30)] 
Output : [('Geeks', 8), ('for', 24), ('Geeks', 30)]
```

Q96. Write a python program to print below pattern.
```
* 
* * 
* * * 
* * * * 
* * * * * 
```
Q97. Write a python program to print below pattern.
```
    *
   **
  ***
 ****
*****
```

Q98. Write a python program to print below pattern.
```
    * 
   * * 
  * * * 
 * * * * 
* * * * * 
```

Q99. Write a python program to print below pattern.
```
1 
1 2 
1 2 3 
1 2 3 4 
1 2 3 4 5
```

Q100. Write a python program to print below pattern.
```
A 
B B 
C C C 
D D D D 
E E E E E 
```
