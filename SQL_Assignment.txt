SQL Assignment:
---------------
SET_1:

Q1. 
SELECT *
FROM City
WHERE COUNTRYCODE LIKE '%USA%'
AND POPULATION > 100000;

Q2. 
SELECT NAME
FROM City
WHERE COUNTRYCODE LIKE '%USA%'
AND POPULATION > 120000;

Q3. 
select * from City;

Q4. 
SELECT *
FROM City
WHERE ID = 1661;

Q5. 
SELECT *
FROM City
WHERE COUNTRYCODE LIKE '%JPN%';

Q6. 
SELECT NAME
FROM City
WHERE COUNTRYCODE LIKE '%JPN%';

Q7. 
SELECT CITY,STATE 
FROM STATION;

Q8.
SELECT DISTINCT(CITY) AS City_Name 
FROM STATION 
WHERE ID%2 = 0 
ORDER BY CITY ASC;

Q9.
SELECT 
COUNT(CITY) AS TOTAL_NUMBER_OF_RECORDS,
COUNT(DISTINCT(CITY)) AS NUMBER_OF_UNIQUE_CITY_NAMES,
(COUNT(CITY) - COUNT(DISTINCT(CITY))) AS DIFFERENCE_CITY_COUNT  
FROM STATION;

Q10.
SELECT CITY,LENGTH(CITY)AS MIN_LENGTH_OF_CITY 
FROM STATION 
ORDER BY LENGTH(CITY),CITY 
LIMIT 1;

SELECT CITY,LENGTH(CITY) AS MAX_LENGTH_OF_CITY 
FROM STATION 
ORDER BY LENGTH(CITY) DESC,CITY 
LIMIT 1;

Q11.
SELECT DISTINCT(CITY) AS DISTINCT_CITY_NAME 
FROM STATION 
WHERE lower(SUBSTR(city,1,1)) in ('a','e','i','o','u');

Q12.
SELECT DISTINCT CITY 
FROM STATION
WHERE lcase(CITY) LIKE '%a'
OR lcase(CITY) LIKE '%e'
OR lcase(CITY) LIKE '%i'
OR lcase(CITY) LIKE '%o'
OR lcase(CITY) LIKE '%u'
ORDER BY CITY;

Q13.
SELECT DISTINCT CITY 
FROM STATION
WHERE lcase(CITY) NOT LIKE 'a%'
AND lcase(CITY) NOT LIKE 'e%'
AND lcase(CITY) NOT LIKE 'i%'
AND lcase(CITY) NOT LIKE 'o%'
AND lcase(CITY) NOT LIKE 'u%'
ORDER BY CITY;

Q14.
SELECT DISTINCT CITY 
FROM STATION
WHERE lcase(CITY) NOT LIKE '%a'
AND lcase(CITY) NOT LIKE '%e'
AND lcase(CITY) NOT LIKE '%i'
AND lcase(CITY) NOT LIKE '%o'
AND lcase(CITY) NOT LIKE '%u'
ORDER BY CITY;

Q15. and Q16.
select distinct CITY 
from STATION 
where CITY not regexp '^[aeiou]' 
or city not regexp '[aeiou]$';

Q17.
SELECT 
product_id, 
product_name 
FROM Product 
WHERE product_id NOT IN (SELECT product_id 
                         FROM   Sales 
                         WHERE  sale_date NOT BETWEEN '2019-01-01' 
						 AND '2019-03-31'); 

Q18.
select distinct author_id as id 
from Views 
where author_id = viewer_id 
order by author_id asc;

Q19.
select round(100*d2.immediate_orders/count(d1.delivery_id), 2) as immediate_percentage
from Delivery d1,
    (select count(order_date) as immediate_orders
    from Delivery 
    where (order_date = customer_pref_delivery_date)) d2;

Q20.
SELECT 
ad_id,
ROUND(100 * COALESCE(SUM(action = 'Clicked') / SUM(action IN ('Clicked', 'Viewed')), 0), 2) ctr
FROM Ads
GROUP BY ad_id
ORDER BY ctr DESC, ad_id;

Q21.
select 
employee_id, 
count(*) over(partition by team_id) as team_size
from Employee order by team_size desc;

Q22.
select 
c.country_name,
case 
    when AVG(w.weather_state*1.0) <= 15 then 'Cold'
    when AVG(w.weather_state*1.0) >= 25 then 'Hot'
    else 'Warm'
end as weather_type
from Countries as c
inner JOIN Weather w 
ON c.country_id = w.country_id 
where w.day between '2019-11-01' and '2019-11-30' 
group by c.country_id;

Q23.
SELECT 
a.product_id, 
round(SUM(a.units * b.price) / SUM(a.units), 2) AS average_price
FROM UnitsSold a
JOIN Prices b
ON (a.product_id = b.product_id
AND a.purchase_date >= b.start_date
AND a.purchase_date <= b.end_date)
GROUP BY product_id;

Q24.
select 
tmp.player_id,
tmp.event_date as first_login
from (select *,
      row_number() over(partition by player_id) as row_num
      from Activity) tmp
where tmp.row_num = 1;

Q25.
select 
tmp.player_id,
tmp.device_id
from (select *,
      row_number() over(partition by player_id) as row_num
      from Activity) tmp
where tmp.row_num = 1;

Q26.
select a.product_name, sum(unit) as unit
from Products a
left join Orders b
on a.product_id = b.product_id
where b.order_date between '2020-02-01' and '2020-02-29'
group by a.product_id
having sum(unit) >= 100;

Q27.
SELECT *
FROM Users
WHERE REGEXP_LIKE(mail, '^[a-zA-Z][a-zA-Z0-9\_\.\-]*@leetcode.com');

select * from Users
where mail regexp '^[a-zA-Z]+[a-zA-Z0-9_\\./\\-]{0,}@leetcode.com$'
order by user_id;

Q28.
select o.customer_id, c.name
from Customers c, Product p, Orders o
where c.customer_id = o.customer_id and p.product_id = o.product_id
group by o.customer_id
having 
(
    sum(case when o.order_date like '2020-06%' then o.quantity*p.price else 0 end) >= 100
    and
    sum(case when o.order_date like '2020-07%' then o.quantity*p.price else 0 end) >= 100
);

Q29.
SELECT DISTINCT title
FROM Content ctt
INNER JOIN TVProgram tv
ON ctt.content_id = tv.content_id
WHERE content_type = 'Movies'
AND Kids_content = 'Y'
AND program_date BETWEEN '2020-06-01' AND '2020-06-30';

Q30. and Q31.
SELECT q.id, q.year, COALESCE(n.npv,0) AS npv
FROM Queries q
LEFT JOIN NPV n
ON q.id = n.id AND q.year=n.year;

Q32.
select en.unique_id,e.name
from employees e left join employeeuni en on e.id=en.id
order by name;

Q33.
select name, sum(ifnull(distance, 0)) as travelled_distance
from Rides r
right join Users u
on r.user_id = u.id
group by name
order by 2 desc,1 asc;

Q34.
select a.product_name, sum(unit) as unit
from Products a
left join Orders b
on a.product_id = b.product_id
where b.order_date between '2020-02-01' and '2020-02-29'
group by a.product_id
having sum(unit) >= 100;

Q35.
SELECT user_name AS results FROM
(
SELECT a.name AS user_name, COUNT(*) AS counts FROM MovieRating AS b
    JOIN Users AS a
    on a.user_id = b.user_id
    GROUP BY b.user_id
    ORDER BY counts DESC, user_name ASC LIMIT 1
) first_query
UNION
SELECT movie_name AS results FROM
(
SELECT c.title AS movie_name, AVG(d.rating) AS rate FROM MovieRating AS d
    JOIN Movies AS c
    on c.movie_id = d.movie_id
    WHERE substr(d.created_at, 1, 7) = '2020-02'
    GROUP BY d.movie_id
    ORDER BY rate DESC, movie_name ASC LIMIT 1
) second_query;

Q36.
select name, sum(ifnull(distance, 0)) as travelled_distance
from Rides r
right join Users u
on r.user_id = u.id
group by name
order by 2 desc,1 asc;

Q37.
select unique_id, name
from Employees
left join EmployeeUNI
on if (Employees.id = EmployeeUNI.id, Employees.id, null);

Q38.
select s.id, s.name
from Students s
left join Departments d
on s.department_id = d.id
where d.id is null;


Q39.
SELECT LEAST(from_id,to_id) as person1,
GREATEST(from_id,to_id) as person2,
COUNT(*) as call_count,
SUM(duration) as total_duration
FROM Calls
GROUP BY person1,person2;

Q40.
select p.product_id, 
    round(sum(p.price * u.units)/sum(u.units), 2) as average_price
from Prices p
left join UnitsSold u
on p.product_id = u.product_id and 
    datediff(u.purchase_date, p.start_date) >= 0 and
    datediff(p.end_date, u.purchase_date) >= 0
group by p.product_id;

Q41.
select name as warehouse_name, sum(units * vol) as volume
from Warehouse w
join (select product_id, Width*Length*Height as vol
     from Products) p
on w.product_id = p.product_id
group by name;

Q42.
select a.sale_date, (a.sold_num - b.sold_num) as diff 
from Sales a left join Sales b
on a.sale_date = b.sale_date
where a.fruit = 'apples' and b.fruit = 'oranges';

Q43.
WITH CTE AS (
SELECT
player_id, min(event_date) as event_start_date
from
Activity
group by player_id )

SELECT
round((count(distinct c.player_id) / (select count(distinct player_id) from Activity)),2)as fraction
FROM
CTE c
JOIN Activity a
on c.player_id = a.player_id
and datediff(c.event_start_date, a.event_date) = -1;


Q44.
select 
    a.name 
from 
    Employee a 
inner join 
    Employee b 
on (a.id = b.managerid) 
group by a.name 
having count(distinct b.id) >= 5;

Q45.
select 
    a.dept_name,
    coalesce(count(student_id), 0) student_number
from 
    Department a 
left join
    Student b
on 
    (a.dept_id = b.dept_id)
group by a.dept_name
order by student_number desc, a.dept_name asc;

Q46.
SELECT
    customer_id
FROM customer
GROUP BY customer_id
HAVING COUNT( DISTINCT product_key) = (SELECT COUNT(*) FROM product);

Q47.
SELECT
    project_id,
    employee_id
FROM (
    SELECT
        p.project_id,
        p.employee_id,
        DENSE_RANK() OVER(PARTITION BY p.project_id ORDER BY e.experience_years DESC) as rnk
    FROM Project as p JOIN Employee as e
    ON p.employee_id = e.employee_id
    ) x
WHERE rnk = 1;

Q48.
select Books.book_id, name from Books join Orders
    on Books.book_id = Orders.book_id
    where available_from < '2019-05-23'
    and dispatch_date between '2018-06-23' and '2019-06-23'
    group by Books.book_id
    having sum(quantity) < 10
    union
select book_id, name from Books
    where available_from < '2019-05-23'
    and book_id not in (
        select distinct book_id from Orders where dispatch_date between '2018-06-23' and '2019-06-23'
    );

Q49.
select e.student_id, e.course_id, e.grade
from (
  select *, row_number() over (partition by student_id order by grade desc) rn
  from Enrollments
) e
where e.rn = 1;

Q50.
select group_id,player_id from 
(select group_id,player_id,sum((
    case when player_id = first_player then first_score
         when player_id = second_player then second_score
         end
)) as totalScores
from Players p,Matches m
where p.player_id = m.first_player
or p.player_id = m.second_player
group by group_id,player_id
order by group_id,totalScores desc,player_id) as temp
group by group_id
order by group_id,totalScores desc,player_id;

------------------------------------------------------------------------------------------------------------------------------------------------------
SET_2:

Q51.
SELECT name,population,area
FROM World
WHERE area > 3000000 or population > 25000000;

Q52.
select name from Customer where referee_id != 2

Q53.
SELECT C.Name FROM Customers C LEFT JOIN Orders O ON C.Id = O.CustomerId WHERE O.CustomerId is NULL;

Q54.
SELECT employee_id, COUNT(team_id) OVER (PARTITION BY team_id) team_size
FROM Employee;

Q55.
SELECT
 co.name AS country
FROM
 Person p
 JOIN
     Country co
     ON SUBSTRING(phone_number,1,3) = country_code
 JOIN
     Calls c
     ON p.id IN (c.caller_id, c.callee_id)
GROUP BY
 co.name
HAVING
 AVG(duration) > (SELECT AVG(duration) FROM Calls);

Q56.
select player_id,device_id from activity a
where event_date=(select min(event_date) from activity group by player_id having player_id=a.player_id);

Q57.
SELECT
    customer_number
FROM
    Orders
GROUP BY customer_number
ORDER BY COUNT(*) DESC
LIMIT 1
;

Q58.
SELECT
    DISTINCT t1.seat_id
FROM Cinema AS t1 JOIN Cinema AS t2
ON abs(t1.seat_id - t2.seat_id) = 1
AND t1.free = 1 AND t2.free = 1
ORDER BY 1; 

Q59.
SELECT name
FROM Salesperson
WHERE sales_id
NOT IN (
    SELECT s.sales_id FROM Orders o
    INNER JOIN Salesperson s ON o.sales_id = s.sales_id
    INNER JOIN Company c ON o.com_id = c.com_id
    WHERE c.name = 'RED'
);

Q60.
SELECT
    x,
    y,
    z,
    CASE WHEN x + y > z AND y + z > x AND z + x > y THEN 'Yes'
        ELSE 'No' END AS triangle
FROM Triangle;

Q61.
select min(abs(p2.x-p1.x)) as shortest
from Point p1, Point p2
where p1.x != p2.x;

Q62.
SELECT actor_id, director_id
FROM ActorDirector
GROUP BY actor_id, director_id
HAVING COUNT(*) >= 3;

Q63.
select p.product_name, s.year, s.price
from Product p
join Sales s
on s.product_id = p.product_id;

Q64.
select project_id , round(avg(experience_years), 2) as average_years
from Project as p
left join Employee as e
on p.employee_id = e.employee_id
group by project_id;

Q65.
select a.seller_id
from 
(select seller_id, sum(price) as sum 
from Sales
group by seller_id) a 
where a.sum = (select max(b.sum)from(select seller_id, sum(price) as sum 
from Sales
group by seller_id)b );

Q66.
select distinct buyer_id from Sales s
join Product p
on p.product_id = s.product_id
where p.product_name = 'S8'
and buyer_id not in
(
select buyer_id from Sales s
    join Product p on p.product_id = s.product_id
    where p.product_name = 'iPhone'
);

Q67.
with cte as(
select 
visited_on,
sum(amount) amount
from customer
group by visited_on)

select 
visited_on,
amount,
average_amount 
from(
select visited_on,
sum(amount) over(order by visited_on rows between 6 preceding  and current row) as amount,
round(sum(amount) over(order by visited_on rows between 6 preceding  and current row)/7,2) as average_amount,
lag(visited_on,6) over(order by visited_on) as prev_6
from cte)a
where prev_6 is not null
order by visited_on;

Q68.
select s1.gender, s1.day, sum(s2.score_points) as total from Scores s1, Scores s2
where s1.gender = s2.gender and s1.day >= s2.day
group by s1.gender, s1.day
order by s1.gender, s1.day;

Q69.
select min(log_id) as start_id, max(log_id) as end_id
from (select l.log_id, (l.log_id - l.row_num) as diff
      from (select log_id, row_number() over() as row_num from Logs) l
      ) l2
group by diff;

Q70.
select a.student_id, a.student_name, b.subject_name, count(c.subject_name) as attended_exams
from Students as a
join Subjects as b
left join Examinations as c
on a.student_id = c.student_id and b.subject_name = c.subject_name
group by a.student_id, b.subject_name;

Q71.
select e3.employee_id from Employees e1, Employees e2, Employees e3
where e1.manager_id = 1 and e2.manager_id = e1.employee_id and e3.manager_id = e2.employee_id and e3.employee_id != 1;

Q72.
SELECT DATE_FORMAT(trans_date, '%Y-%m') AS month, country
       , COUNT(1) AS trans_count
       , COUNT(if(state = 'approved', 1, NULL)) AS approved_count
       , SUM(amount) AS trans_total_amount
       , SUM(if(state = 'approved', amount, 0)) AS approved_total_amount
FROM Transactions
GROUP BY month, country;

Q73.
SELECT ROUND(AVG(percentage),2) AS average_daily_percent
FROM (
SELECT action_date, 
(COUNT(DISTINCT b.post_id)/COUNT(DISTINCT a.post_id))*100 AS percentage 
FROM Actions AS a
LEFT JOIN Removals AS b
ON a.post_id = b.post_id
WHERE a.action = 'report'
AND a.extra = 'spam'
GROUP BY a.action_date
) AS tmp;

Q74. and Q75.
WITH CTE AS (
SELECT
player_id, min(event_date) as event_start_date
from
Activity
group by player_id )

SELECT
round((count(distinct c.player_id) / (select count(distinct player_id) from Activity)),2)as fraction
FROM
CTE c
JOIN Activity a
on c.player_id = a.player_id
and datediff(c.event_start_date, a.event_date) = -1;

Q76.
Q77.
Q78.
Q79.

Q80.
Q81.
Q82.
Q83.
Q84.
Q85.
Q86.
Q87.
Q88.
Q89.

Q90.
Q91.
Q92.
Q93.
Q94.
Q95.
Q96.
Q97.
Q98.
Q99.

Q100.

------------------------------------------------------------------------------------------------------------------------------------------------------
SET_3:
------------------------------------------------------------------------------------------------------------------------------------------------------

Q101.
Q102.
Q103.
Q104.
Q105.
Q106.
Q107.
Q108.
Q109.

Q1X0.
Q1X1.
Q1X2.
Q1X3.
Q1X4.
Q1X5.
Q1X6.
Q1X7.
Q1X8.
Q1X9.

Q1X0.
Q1X1.
Q1X2.
Q1X3.
Q1X4.
Q1X5.
Q1X6.
Q1X7.
Q1X8.
Q1X9.

Q1X0.
Q1X1.
Q1X2.
Q1X3.
Q1X4.
Q1X5.
Q1X6.
Q1X7.
Q1X8.
Q1X9.

Q1X0.
Q1X1.
Q1X2.
Q1X3.
Q1X4.
Q1X5.
Q1X6.
Q1X7.
Q1X8.
Q1X9.

Q1X0.
Q1X1.
Q1X2.
Q1X3.
Q1X4.
Q1X5.
Q1X6.
Q1X7.
Q1X8.
Q1X9.


----------------------------
Q1X0.
Q1X1.
Q1X2.
Q1X3.
Q1X4.
Q1X5.
Q1X6.
Q1X7.
Q1X8.
Q1X9.
