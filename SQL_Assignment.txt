SQL Assignment:
---------------
SET_1:

Q1. 
SELECT *
FROM City
WHERE COUNTRYCODE LIKE '%USA%'
AND POPULATION > 100000;

Q2. 
SELECT NAME
FROM City
WHERE COUNTRYCODE LIKE '%USA%'
AND POPULATION > 120000;

Q3. 
select * from City;

Q4. 
SELECT *
FROM City
WHERE ID = 1661;

Q5. 
SELECT *
FROM City
WHERE COUNTRYCODE LIKE '%JPN%';

Q6. 
SELECT NAME
FROM City
WHERE COUNTRYCODE LIKE '%JPN%';

Q7. 
SELECT CITY,STATE 
FROM STATION;

Q8.
SELECT DISTINCT(CITY) AS City_Name 
FROM STATION 
WHERE ID%2 = 0 
ORDER BY CITY ASC;

Q9.
SELECT 
COUNT(CITY) AS TOTAL_NUMBER_OF_RECORDS,
COUNT(DISTINCT(CITY)) AS NUMBER_OF_UNIQUE_CITY_NAMES,
(COUNT(CITY) - COUNT(DISTINCT(CITY))) AS DIFFERENCE_CITY_COUNT  
FROM STATION;

Q10.
SELECT CITY,LENGTH(CITY)AS MIN_LENGTH_OF_CITY 
FROM STATION 
ORDER BY LENGTH(CITY),CITY 
LIMIT 1;

SELECT CITY,LENGTH(CITY) AS MAX_LENGTH_OF_CITY 
FROM STATION 
ORDER BY LENGTH(CITY) DESC,CITY 
LIMIT 1;

Q11.
SELECT DISTINCT(CITY) AS DISTINCT_CITY_NAME 
FROM STATION 
WHERE lower(SUBSTR(city,1,1)) in ('a','e','i','o','u');

Q12.
SELECT DISTINCT CITY 
FROM STATION
WHERE lcase(CITY) LIKE '%a'
OR lcase(CITY) LIKE '%e'
OR lcase(CITY) LIKE '%i'
OR lcase(CITY) LIKE '%o'
OR lcase(CITY) LIKE '%u'
ORDER BY CITY;

Q13.
SELECT DISTINCT CITY 
FROM STATION
WHERE lcase(CITY) NOT LIKE 'a%'
AND lcase(CITY) NOT LIKE 'e%'
AND lcase(CITY) NOT LIKE 'i%'
AND lcase(CITY) NOT LIKE 'o%'
AND lcase(CITY) NOT LIKE 'u%'
ORDER BY CITY;

Q14.
SELECT DISTINCT CITY 
FROM STATION
WHERE lcase(CITY) NOT LIKE '%a'
AND lcase(CITY) NOT LIKE '%e'
AND lcase(CITY) NOT LIKE '%i'
AND lcase(CITY) NOT LIKE '%o'
AND lcase(CITY) NOT LIKE '%u'
ORDER BY CITY;

Q15. and Q16.
select distinct CITY 
from STATION 
where CITY not regexp '^[aeiou]' 
or city not regexp '[aeiou]$';

Q17.
SELECT 
product_id, 
product_name 
FROM Product 
WHERE product_id NOT IN (SELECT product_id 
                         FROM   Sales 
                         WHERE  sale_date NOT BETWEEN '2019-01-01' 
						 AND '2019-03-31'); 

Q18.
select distinct author_id as id 
from Views 
where author_id = viewer_id 
order by author_id asc;

Q19.
select round(100*d2.immediate_orders/count(d1.delivery_id), 2) as immediate_percentage
from Delivery d1,
    (select count(order_date) as immediate_orders
    from Delivery 
    where (order_date = customer_pref_delivery_date)) d2;

Q20.
SELECT 
ad_id,
ROUND(100 * COALESCE(SUM(action = 'Clicked') / SUM(action IN ('Clicked', 'Viewed')), 0), 2) ctr
FROM Ads
GROUP BY ad_id
ORDER BY ctr DESC, ad_id;

Q21.
select 
employee_id, 
count(*) over(partition by team_id) as team_size
from Employee order by team_size desc;

Q22.
select 
c.country_name,
case 
    when AVG(w.weather_state*1.0) <= 15 then 'Cold'
    when AVG(w.weather_state*1.0) >= 25 then 'Hot'
    else 'Warm'
end as weather_type
from Countries as c
inner JOIN Weather w 
ON c.country_id = w.country_id 
where w.day between '2019-11-01' and '2019-11-30' 
group by c.country_id;

Q23.
SELECT 
a.product_id, 
round(SUM(a.units * b.price) / SUM(a.units), 2) AS average_price
FROM UnitsSold a
JOIN Prices b
ON (a.product_id = b.product_id
AND a.purchase_date >= b.start_date
AND a.purchase_date <= b.end_date)
GROUP BY product_id;

Q24.
select 
tmp.player_id,
tmp.event_date as first_login
from (select *,
      row_number() over(partition by player_id) as row_num
      from Activity) tmp
where tmp.row_num = 1;

Q25.
select 
tmp.player_id,
tmp.device_id
from (select *,
      row_number() over(partition by player_id) as row_num
      from Activity) tmp
where tmp.row_num = 1;

Q26.
select a.product_name, sum(unit) as unit
from Products a
left join Orders b
on a.product_id = b.product_id
where b.order_date between '2020-02-01' and '2020-02-29'
group by a.product_id
having sum(unit) >= 100;

Q27.
SELECT *
FROM Users
WHERE REGEXP_LIKE(mail, '^[a-zA-Z][a-zA-Z0-9\_\.\-]*@leetcode.com');

select * from Users
where mail regexp '^[a-zA-Z]+[a-zA-Z0-9_\\./\\-]{0,}@leetcode.com$'
order by user_id;

Q28.
select o.customer_id, c.name
from Customers c, Product p, Orders o
where c.customer_id = o.customer_id and p.product_id = o.product_id
group by o.customer_id
having 
(
    sum(case when o.order_date like '2020-06%' then o.quantity*p.price else 0 end) >= 100
    and
    sum(case when o.order_date like '2020-07%' then o.quantity*p.price else 0 end) >= 100
);

Q29.
SELECT DISTINCT title
FROM Content ctt
INNER JOIN TVProgram tv
ON ctt.content_id = tv.content_id
WHERE content_type = 'Movies'
AND Kids_content = 'Y'
AND program_date BETWEEN '2020-06-01' AND '2020-06-30';

Q30. and Q31.
SELECT q.id, q.year, COALESCE(n.npv,0) AS npv
FROM Queries q
LEFT JOIN NPV n
ON q.id = n.id AND q.year=n.year;

Q32.
select en.unique_id,e.name
from employees e left join employeeuni en on e.id=en.id
order by name;

Q33.
select name, sum(ifnull(distance, 0)) as travelled_distance
from Rides r
right join Users u
on r.user_id = u.id
group by name
order by 2 desc,1 asc;

Q34.
select a.product_name, sum(unit) as unit
from Products a
left join Orders b
on a.product_id = b.product_id
where b.order_date between '2020-02-01' and '2020-02-29'
group by a.product_id
having sum(unit) >= 100;

Q35.
SELECT user_name AS results FROM
(
SELECT a.name AS user_name, COUNT(*) AS counts FROM MovieRating AS b
    JOIN Users AS a
    on a.user_id = b.user_id
    GROUP BY b.user_id
    ORDER BY counts DESC, user_name ASC LIMIT 1
) first_query
UNION
SELECT movie_name AS results FROM
(
SELECT c.title AS movie_name, AVG(d.rating) AS rate FROM MovieRating AS d
    JOIN Movies AS c
    on c.movie_id = d.movie_id
    WHERE substr(d.created_at, 1, 7) = '2020-02'
    GROUP BY d.movie_id
    ORDER BY rate DESC, movie_name ASC LIMIT 1
) second_query;

Q36.

Q37.

Q38.

Q39.

Q40.

Q41.

Q42.

Q43.

Q44.

Q45.

Q46.

Q47.

Q48.

Q49.

Q50.

------------------------------------------------------------------------------------------------------------------------------------------------------
SET_2:
------------------------------------------------------------------------------------------------------------------------------------------------------
SET_3:
------------------------------------------------------------------------------------------------------------------------------------------------------

